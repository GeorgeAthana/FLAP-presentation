---
title: Forecast Linear Augmented Projection (FLAP)
author: Fin Yang, **George Athanasopoulos**, Rob J Hyndman, Anastasios Panagiotelis 
#date: 19 September 2024
toc: false
format:
  presentation-beamer:
    pdf-engine: pdflatex
    knitr:
      opts_chunk:
        dev: "CairoPDF"
    template-partials:
      - before-title.tex
    include-in-header: header.tex
    keep-tex: true
cite-method: biblatex
biblatexoptions: natbib,style=authoryear
bibliography: hts.bib
highlight-style: tango
execute:
  echo: false
  message: false
  warning: false
  cache: true
abstract: Univariate, multivariate, and hierarchical forecasts can all be improved using projections onto linear subspaces, regardless of what forecasting method is used. I will show some theoretical guarantees of this statement, and demonstrate using empirical applications how linear projections can lead to (sometimes dramatic) improvements in forecast accuracy.
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-packages
#| cache: false
source("setup.R")
```

```{r}
#| label: aus-visnights
visnights <- readr::read_csv(here::here("data/visnights_monthly.csv")) |>
  mutate(Month = yearmonth(Month)) |>
  group_by(Month, Region) |>
  summarise(Nights = sum(Nights), .groups = "drop")

```


## Australian tourism regions

```{r}
#| label: ausmap
#| eval: false
library(sf)
# Use Okabe-Ito color-blind friendly color palette
state_colors <- c(
  `New South Wales` = "#56b4e9",
  `Victoria` = "#0072b2",
  `Queensland` = "#009e73",
  `South Australia` = "#f0e442",
  `Northern Territory` = "#d55e00",
  `Western Australia` = "#e69f00",
  `Tasmania` = "#cc79a7",
  `Australian Capital Territory` = "#cccccc"
)
Cairo::CairoPDF(here::here("figs/ausmap.pdf"), width = 15/1.5, height = 7/1.5)
read_sf("tourism/Tourism_Regions_2020.shp") |>
  rename(State = "STE_NAME16") |>
  ggplot() +
  geom_sf(aes(fill = State), alpha = 0.8) +
  theme_void() +
  theme(text = ggplot2::element_text(family = 'Fira Sans')) +
  scale_fill_manual(values = state_colors)
crop::dev.off.crop(here::here("figs/aus_map.pdf"))


```

\begin{textblock}{5}(2,1.5)
\centerline{\includegraphics[width=8cm,height=7cm]{figs/aus_map_nolegend.png}}
\end{textblock}


\begin{textblock}{5}(9.4,2.4)
\begin{block}{}%\fontsize{12}{13}\sf
  \begin{itemize}\itemsep=0cm\parskip=0cm
    \item Visitor Nights 
    \item Monthly time series
    \item 1998 -- 2019
    \item \bf{77 regions}
  \end{itemize}
\end{block}
\end{textblock}


## Regions V Aggregate
```{r}
p_syd_mel <- visnights %>%
  filter(Region %in% c("Sydney", "Melbourne")) %>%
  ggplot() +
  geom_line(aes(x = Month, y = Nights, colour = Region)) +
   #facet_grid("Region", scales = "free") +
  scale_y_log10()  +
  theme(legend.position = "right") +
  scale_color_manual(
    values = cb_palette_grey[c(6, 7)]
  )

p_aus <- bind_rows(
   visnights %>%
      group_by(Month) %>%
      summarise(Nights = sum(Nights), .groups = "drop") %>%
      mutate(Region = "Australia")) %>%
   ggplot() +
   geom_line(aes(x = Month, y = Nights, colour = Region)) +
   #facet_grid("Region", scales = "free") +
   scale_y_log10()+
   theme(legend.position = "right")+
   scale_color_manual(
      values = cb_palette_black[1]
   )
```

```{r, fig.height=2.35}
p_syd_mel
```
\pause

```{r, fig.height=2.35}
p_aus
```


## FLAP Intuition

We have multivariate times series: 

-  which share similar patterns;
-  with a better signal-noise ratio in the linear combination.

\pause

\vspace{0.3cm}

\begin{alertblock}{Can we find components that:}

\begin{enumerate}
\item are easy to forecast (or easier than the original series);
\item can capture possible common signals;
\item can improve forecast of original series.
\end{enumerate}

\end{alertblock}


## Outline of FLAP Implementation

* We want to forecast a multivariate series $\bm{y}_t \in \mathbb{R}^m$.
* Construct many linear combinations $\bm{c}_t = \bm{\Phi}\bm{y}_t  \in \mathbb{R}^p$ of the multivariate series. 
* Produce univariate forecasts of all series $\textcolor{blue}{\hat{\bm{y}}_{t+h}}$ and all linear combinations $\textcolor{blue}{\hat{\bm{c}}_{t+h}}$.
* Project forecasts onto the $\mathbb{R}^m$ coherent subspace, resulting in $\textcolor{red}{\tilde{\bm{y}}_{t+h}}$.

## Geometry of FLAP 

\only<1>{\includegraphics[page=1, width=12cm]{figs/FLAP_geometry.pdf}}
\only<2>{\includegraphics[page=2, width=12cm]{figs/FLAP_geometry.pdf}}
\only<3>{\includegraphics[page=3, width=12cm]{figs/FLAP_geometry.pdf}}
\only<4>{\includegraphics[page=4, width=12cm]{figs/FLAP_geometry.pdf}}
\only<5>{\includegraphics[page=5, width=12cm]{figs/FLAP_geometry.pdf}}


<!-- \input{figs/FLAP_geometry.tex} -->
<!-- \includegraphics{path/to/your/tikz_picture.pdf} -->


## FLAP Projection

\vspace*{-0.6cm}

$$
\bm{z}_t = \begin{bmatrix} \bm{y}_t\\ \bm{c}_t \end{bmatrix} = \begin{bmatrix} \bm{y}_t\\ \bm{\Phi}\bm{y}_t \end{bmatrix},
\qquad \textcolor{blue}{\hat{\bm{z}}_{t+h}} = \begin{bmatrix} \textcolor{blue}{\hat{\bm{y}}_{t+h}}\\ \textcolor{blue}{\hat{\bm{c}}_{t+h}}\end{bmatrix}, 
\qquad\textcolor{red}{\tilde{\bm{z}}_{t+h}} = \bm{M} \textcolor{blue}{\hat{\bm{z}}_{t+h}}
$$

where $\bm{M}$ is a projection matrix onto the $\mathbb{R}^m$ coherent subspace
\vspace*{-0.4cm}

$$
\begin{aligned}
\bm{M} &= \bm{I}_{m+p} - \bm{W}_h\bm{C}'(\bm{C}\bm{W}_h\bm{C}')^{-1}\bm{C}\\
\bm{C} &= \big[- \bm{\Phi} ~~~ \bm{I}_{p}\big]\\
\bm{W}_h &= \Var(\bm{z}_{t+h} - \textcolor{blue}{\hat{\bm{z}}_{t+h}})
\end{aligned}
$$
\pause
\begin{block}{}
\vspace*{-0.3cm}
$$
\textcolor{red}{\tilde{\bm{y}}_{t+h}} = 
\bm{G}\textcolor{blue}{\hat{\bm{z}}_{t+h}} = \bm{J}\bm{M}\textcolor{blue}{\hat{\bm{z}}_{t+h}}
$$\vspace*{-0.8cm}
\end{block}

\vspace*{-1cm}
$$
\bm{J} = \big[\bm{I}_m ~~~ \bm{O}_{m\times p}\big]
$$

## Minimum variance of individual series

The projection is equivalent to the mapping
$$
\textcolor{red}{\tilde{\bm{y}}_{t+h}} = \bm{G}\textcolor{blue}{\hat{\bm{z}}_{t+h}}~~\text{and}~~\Var(\bm{y}_{t+h} - \textcolor{red}{\tilde{\bm{y}}_{t+h}})=\bm{G}\bm{W}_h\bm{G}',
$$
where $\bm{G} = \big[\bm{g}_1 ~~ \bm{g}_2 ~~ \dots ~~ \bm{g}_m\big]' \in \mathbb{R}^{m\times (m+p)}$ is the solution to
$$
\underset{\bm{G}}{\arg\min}\ \text{tr} (\bm{G}\bm{W}_h\bm{G}')
\qquad \text{s.t. } \bm{G}\bm{S} = \bm{I}
$$
or
$$
\underset{\bm{g}_i}{\arg\min}\ \bm{g}_i'\bm{W}_h\bm{g}_i
\qquad \text{s.t. } \bm{g}_i'\bm{s}_{j} = \bm{1}(i=j),
$$
where $\bm{S} = \begin{bmatrix}\bm{I}_m \\\bm{\Phi}\end{bmatrix} = \big[\bm{s}_1\cdots \bm{s}_m\big]$.

## Key results

1. The forecast error variance is **reduced** with FLAP 
   - $\Var(\bm{y}_{t+h} - \textcolor{blue}{\hat{\bm{y}}_{t+h}}) -\Var(\bm{y}_{t+h} - \textcolor{red}{\tilde{\bm{y}}_{t+h}})$
is __positive semi-definite__. \pause

\vspace*{0.3cm}

2. The forecast error variance **monotonically** decreases with increasing number of components 
   - the diagonal elements of $\Var(\bm{y}_{t+h} - \textcolor{blue}{\hat{\bm{y}}_{t+h}}) -\Var(\bm{y}_{t+h} - \textcolor{red}{\tilde{\bm{y}}_{t+h}})$ are non-decreasing as the number of components increases. \pause

\vspace*{0.3cm}

3. The forecast projection is **optimal** to achieve minimum forecast error variance of each series.

## In practice, we need to:

* Estimate $\bm{W}_h = \Var(\bm{z}_{t+h} - \textcolor{blue}{\hat{\bm{z}}_{t+h})}$. 
    * Use in-sample residuals, shrink variances to their median, covariances to zero.

\pause\vspace*{0.3cm}

* Construct the components, $\bm{\Phi}$.
     * Principal component analysis (PCA): find the weights matrix $\bm{\Phi}$ so that the resulting components \alert{\textbf{maximise variance}}.
    * Simulation: generate values of $\bm{\Phi}$ from a random distribution and normalising them to unit vectors.
       * Normal distribution
       * Uniform distribution
       * Orthonormal matrix

## Simulation

* Data generating process: VAR($3$) with $m=70$ variables

* Innovations $\sim N(0,\bm{I}_m)$ 

* Sample size: $T=400$

* Number of repeated samples: $220$

* Base forecasts:

  * ARIMA models using AICc (`auto.arima()` in `forecast` package).
  * DFM structure using BIC (different model for each horizon).


## Simulation

```{r simulation}
m <- 70
mse <- qs::qread(here::here("output/simulation_mse.qs")) |>
  as_tibble() |>
  filter(model %in% c("arima", "dfm", "var", "true"),
         Phi %in% c("PCA_normal") | is.na(Phi),
         h %in% c(1, 6)) |>
  mutate(
    Component = case_when(
      !proj ~ "No projection",
      proj & Phi == "PCA_normal" ~ "PCA + Normal",
      TRUE ~ "Other"
    )
  )
mse |>
  ggplot(aes(x = p, y = value, colour = model, linetype = Component)) +
  geom_vline(xintercept = m) +
  geom_line() +
  geom_hline(data = filter(mse, !proj),
             aes(yintercept = value, colour = model, linetype = Component)) +
  facet_grid(rows = "h", scales = "free", labeller = label_both) +
  ylab("MSE") +
  scale_color_manual(
    name = "Model",
    values = cb_palette_grey[c(7, 6, 4, 2)],
    labels = c(
      "arima" = "ARIMA",
      "dfm" = "DFM",
      "true" = "VAR - DGP",
      "var" = "VAR - Est.")) +
  scale_linetype_manual(
    name = "Component",
    values = c("dashed", "solid"),
    labels = c("No projection", "PCA + Normal")
  )
```

## Monthly Australian regional tourism

* Monthly Australian tourism data by region giving 77 series, from Jan 1998 to Dec 2019

* Use expanding window time series cross-validation with $T=84$ observations in first training set, and forecast horizons $h=1,2,\dots,12$.

* Estimate `ets()` models using the `forecast` package.


## Monthly Australian regional tourism


```{r}
#| label: series
#| fig-height: 5
regions <- c("Melbourne", "Canberra", "Fraser Coast", "Central Highlands")

visnights |>
  filter(Region %in% regions) |>
  ggplot() +
  geom_line(aes(x = Month, y = Nights)) +
  facet_grid("Region", scales = "free")
```

## Monthly Australian regional tourism

```{r}
#| label: components
source(here::here("component.R"))
visnights_wide <- visnights |>
  pivot_wider(names_from = Region, values_from = Nights)
col_month <- select(visnights_wide, Month)
visnights_wide |>
  select(-Month) |>
  as.matrix() |>
  component() |>
  getElement("x") %>%
  bind_cols(col_month, .) |>
  pivot_longer(-Month,
               names_to = "Component",
               values_to = "Value") |>
  filter(Component %in% unique(Component)[seq_len(4)]) |>
  ggplot() +
  geom_line(aes(x = Month, y = Value)) +
  facet_grid("Component", scales = "free")
```


## Monthly Australian regional tourism - `ets()`

```{r visnights}
m <- 77
qs::qread(here::here("output/tourism_mse.qs")) |>
  filter(h %in% c(1, 6, 12)) |>
  mutate(
    Component = case_match(paste(proj, Phi, sep = "."),
      "TRUE.PCA_normal" ~ "PCA+Norm.",
      "FALSE.NA" ~ "No Proj.",
      "TRUE.normal" ~ "Norm."
    )
  ) |>
  filter(!is.na(Component)) |>
  ggplot(aes(x = p, y = value, color = Component)) +
  geom_vline(xintercept = m) +
  geom_line() +
  geom_hline(data = \(df) filter(df, !proj), aes(yintercept = value, color = Component)) +
  facet_grid(rows = "h", scales = "free", labeller = label_both) +
  ylab("MSE")
```

## FRED-MD

* Monthly data of macroeconomic variables (McCracken and Ng, 2016).

* Data from Jan 1959 -- Sep 2023. 777 observations on 122 series.

* Same cleaning process as per McCracken and Ng (2016).

* All series scaled to have mean 0 and variance 1.

* Expanding time series cross-validation with initial size of 25 years and forecast horizon 12 months.

```{r}
#| label: fred-md
m <- 122
mse <- qs::qread(here::here("output/fred_mse.qs")) |>
  tibble::as_tibble() |>
  filter(model %in% c("arima", "dfm"), h %in% c(1, 6, 12)) |>
  filter(Phi %in% c("NA", "normal", "PCA_normal")) |>
  mutate(
    Component = case_when(
      !proj ~ "No projection",
      Phi == "normal" ~ "Normal",
      Phi == "PCA_normal" ~ "PCA + Normal"
    )
  )
```


## FRED-MD

```{r}
#| label: fred-md-arima
mse |>
  filter(model %in% c("arima","dfm")) |>
  filter(Phi %in% c("NA", "PCA_normal"))|>
  ggplot(aes(x = p, y = value, colour = model, linetype = Component)) +
  geom_vline(xintercept = m) +
  geom_line() +
  geom_hline(data = filter(mse, !proj),
             aes(yintercept = value, colour = model, linetype = Component)) +
  facet_grid(rows = "h", scales = "free", labeller = label_both) +
  ylab("MSE") +
  scale_color_manual(
    name = "Model",
    values = cb_palette_grey[c(7, 6, 4, 2)],
    labels = c(
      "arima" = "ARIMA",
      "dfm" = "DFM",
      "true" = "VAR - DGP",
      "var" = "VAR - Est.")) +
  scale_linetype_manual(
    name = "Component",
    values = c("dashed", "solid"),
    labels = c("No projection", "PCA + Normal")
  )
```

## Future research directions

* Investigate why PCA performs better than random weights

* Find other components that are better than PCA

* Find optimal components by minimising forecast error variance with respect to $\bm{\Phi}$

* Use forecast projection and forecast reconciliation together

## Working Paper and R Package

\fontsize{10}{8}\sf

\fullcite{flap}

\fontsize{12}{8}\sf

You can install the stable version from CRAN
``` r
## CRAN.R-project.org/package=flap
install.packages("flap")
``` 
or the development version from Github
```r
## github.com/FinYang/flap
# install.packages("remotes")
remotes::install_github("FinYang/flap")
```
## Slides and other information

**Slides:**

[\color{Blue}{https://github.com/GeorgeAthana/FLAP-presentation}](https://github.com/GeorgeAthana/FLAP-presentation)

\vspace*{1cm}

**Other information:**

[\color{Blue}{https://research.monash.edu/en/persons/george-athanasopoulos}](https://research.monash.edu/en/persons/george-athanasopoulos)

\vspace*{0.5cm}

\alert{Thank you!}

<!-- \nocite{Di_FonGir2022a,temporal-hierarchies,ctprob} -->
<!-- \nocite{hierarchical,hfreview,coherentprob,htsgeometry,mint} -->

